# Test Environment Configuration
# Copy this file and configure with your test database credentials

# Test Database (Required)
# Use a separate database for testing to avoid data conflicts
DATABASE_URL="postgresql://username:password@localhost:5432/hall_booking_test"

# Redis for Testing (Optional but recommended)
# Use a separate Redis instance or database number for testing
UPSTASH_REDIS_REST_URL="https://your-test-redis.upstash.io"
UPSTASH_REDIS_REST_TOKEN="your-test-token"

# JWT Secret for Testing
JWT_SECRET="test-jwt-secret-key-for-integration-tests-at-least-32-characters"

# Razorpay Test Configuration (for payment integration tests)
RAZORPAY_KEY_ID="rzp_test_your_test_key_id"
RAZORPAY_KEY_SECRET="your_test_razorpay_secret"
RAZORPAY_WEBHOOK_SECRET="test_webhook_secret_key_for_signature_validation"

# Test Environment Settings
NODE_ENV="test"
PORT=3001
ENABLE_TEST_LOGS="false"

# Performance Test Configuration
PERFORMANCE_TEST_CONCURRENCY=10
PERFORMANCE_TEST_DURATION=30000
PERFORMANCE_TEST_RAMP_UP=5000

# Test Database Setup
# Run these commands before running tests:
# 1. Create test database: createdb hall_booking_test
# 2. Run migrations: npx prisma migrate deploy
# 3. Generate Prisma client: npx prisma generate

# Optional: Test-specific overrides
LOG_LEVEL="error"
ENABLE_SWAGGER="false"
ENABLE_CORS="true"
